import { Platform, PermissionsAndroid, Alert } from 'react-native';
import * as Notifications from 'expo-notifications';
import { check, request, PERMISSIONS, RESULTS } from 'react-native-permissions';

/**
 * Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o (Expo & native Android/iOS).
 */
export async function requestNotificationPermission(): Promise<boolean> {
  try {
    const { status: currentStatus } = await Notifications.getPermissionsAsync();

    if (currentStatus !== 'granted') {
      const { status: newStatus } = await Notifications.requestPermissionsAsync();
      if (newStatus !== 'granted') {
        Alert.alert('Th√¥ng b√°o', 'B·∫°n ch∆∞a c·∫•p quy·ªÅn nh·∫≠n th√¥ng b√°o üò¢');
        return false;
      }
    }

    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'Th√¥ng b√°o',
        importance: Notifications.AndroidImportance.HIGH,
        sound: 'default',
      });
    }

    console.log('‚úÖ Quy·ªÅn th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫•p');
    return true;
  } catch (error) {
    console.warn('‚ùå L·ªói khi y√™u c·∫ßu quy·ªÅn th√¥ng b√°o:', error);
    return false;
  }
}

/**
 * Y√™u c·∫ßu quy·ªÅn s·ª≠ d·ª•ng micro
 */
export async function requestMicrophonePermission(): Promise<boolean> {
  try {
    if (Platform.OS === 'android') {
      const result = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
      );
      return result === PermissionsAndroid.RESULTS.GRANTED;
    } else {
      const result = await request(PERMISSIONS.IOS.MICROPHONE);
      return result === RESULTS.GRANTED;
    }
  } catch (error) {
    console.warn('‚ùå L·ªói xin quy·ªÅn micro:', error);
    return false;
  }
}

/**
 * Y√™u c·∫ßu quy·ªÅn s·ª≠ d·ª•ng camera
 */
export async function requestCameraPermission(): Promise<boolean> {
  try {
    if (Platform.OS === 'android') {
      const result = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.CAMERA,
      );
      return result === PermissionsAndroid.RESULTS.GRANTED;
    } else {
      const result = await request(PERMISSIONS.IOS.CAMERA);
      return result === RESULTS.GRANTED;
    }
  } catch (error) {
    console.warn('‚ùå L·ªói xin quy·ªÅn camera:', error);
    return false;
  }
}

/**
 * Y√™u c·∫ßu quy·ªÅn truy c·∫≠p b·ªô nh·ªõ (·∫£nh/video)
 */
export async function requestStoragePermission(): Promise<boolean> {
  try {
    if (Platform.OS === 'android') {
      const result = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
      );
      return result === PermissionsAndroid.RESULTS.GRANTED;
    } else {
      const result = await request(PERMISSIONS.IOS.PHOTO_LIBRARY);
      return result === RESULTS.GRANTED;
    }
  } catch (error) {
    console.warn('‚ùå L·ªói xin quy·ªÅn l∆∞u tr·ªØ:', error);
    return false;
  }
}

/**
 * Y√™u c·∫ßu quy·ªÅn ƒë·ªãnh v·ªã (GPS)
 */
export async function requestLocationPermission(): Promise<boolean> {
  try {
    if (Platform.OS === 'android') {
      const result = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      );
      return result === PermissionsAndroid.RESULTS.GRANTED;
    } else {
      const result = await request(PERMISSIONS.IOS.LOCATION_WHEN_IN_USE);
      return result === RESULTS.GRANTED;
    }
  } catch (error) {
    console.warn('‚ùå L·ªói xin quy·ªÅn ƒë·ªãnh v·ªã:', error);
    return false;
  }
}

/**
 * ‚úÖ H√†m t·ªïng xin to√†n b·ªô c√°c quy·ªÅn c·∫ßn thi·∫øt
 */
export async function requestAllPermissions(): Promise<void> {
  const [
    notificationGranted,
    cameraGranted,
    micGranted,
    storageGranted,
    locationGranted,
  ] = await Promise.all([
    requestNotificationPermission(),
    requestCameraPermission(),
    requestMicrophonePermission(),
    requestStoragePermission(),
    requestLocationPermission(),
  ]);

  const grantedAll = notificationGranted && cameraGranted && micGranted && storageGranted && locationGranted;

  console.log('üîê T√¨nh tr·∫°ng c·∫•p quy·ªÅn:', {
    notificationGranted,
    cameraGranted,
    micGranted,
    storageGranted,
    locationGranted,
  });

  if (!grantedAll) {
    Alert.alert('Thi·∫øu quy·ªÅn', 'M·ªôt s·ªë quy·ªÅn kh√¥ng ƒë∆∞·ª£c c·∫•p. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông.');
  }
}
