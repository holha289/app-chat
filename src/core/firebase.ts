import messaging from "@react-native-firebase/messaging";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { Platform, Alert, ToastAndroid } from "react-native";
import firebase from "@react-native-firebase/app";
import auth from "@react-native-firebase/auth";
import * as Notifications from "expo-notifications";

/**
 * Thi·∫øt l·∫≠p d·ªãch v·ª• messaging Firebase
 */
export async function setupMessaging() {
  try {
    // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o
    const hasPermission = await requestUserPermission();
    if (!hasPermission) {
      console.log("Kh√¥ng c√≥ quy·ªÅn th√¥ng b√°o");
      return false;
    }

    // L·∫•y FCM token
    const token = await getFCMToken();
    if (token) {
      console.log("ƒê√£ thi·∫øt l·∫≠p messaging th√†nh c√¥ng v·ªõi token:", token);
    }

    // X·ª≠ l√Ω th√¥ng b√°o khi app ƒëang ch·∫°y foreground
    messaging().onMessage(async (remoteMessage) => {
      console.log("Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c trong foreground:", remoteMessage);
      await Notifications.scheduleNotificationAsync({
        content: {
          title: remoteMessage.notification?.title || "Tin m·ªõi!",
          body: remoteMessage.notification?.body || "",
          sound: "default",
        },
        trigger: null,
      });
    });

    // X·ª≠ l√Ω th√¥ng b√°o khi app ƒë∆∞·ª£c m·ªü t·ª´ background state
    messaging().onNotificationOpenedApp((remoteMessage) => {
      console.log(
        "App ƒë∆∞·ª£c m·ªü t·ª´ background state b·ªüi th√¥ng b√°o:",
        remoteMessage
      );
    });
    messaging().setBackgroundMessageHandler(async (remoteMessage) => {
      console.log(
        "üì¶ Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c trong background/quit:",
        remoteMessage
      );
    });
    // Ki·ªÉm tra xem app c√≥ ƒë∆∞·ª£c m·ªü t·ª´ quit state b·ªüi m·ªôt th√¥ng b√°o kh√¥ng
    messaging()
      .getInitialNotification()
      .then((remoteMessage) => {
        if (remoteMessage) {
          console.log(
            "App ƒë∆∞·ª£c m·ªü t·ª´ quit state b·ªüi th√¥ng b√°o:",
            remoteMessage
          );
        }
      });

    return true;
  } catch (error) {
    console.error("L·ªói khi thi·∫øt l·∫≠p messaging:", error);
    return false;
  }
}

/**
 * Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c d·ªãch v·ª• Firebase c·∫ßn thi·∫øt
 * G·ªçi h√†m n√†y trong th√†nh ph·∫ßn cao nh·∫•t c·ªßa ·ª©ng d·ª•ng (App.tsx)
 */
export async function initializeFirebase() {
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Firebase
    await firebase.app().options;
    console.log("ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Firebase");

    // Kh·ªüi t·∫°o d·ªãch v·ª• th√¥ng b√°o
    await setupMessaging();

    // Thi·∫øt l·∫≠p listener cho token refresh
    setupTokenRefreshListener();

    return true;
  } catch (error) {
    console.error("L·ªói khi kh·ªüi t·∫°o Firebase:", error);
    return false;
  }
}

/**
 * Thi·∫øt l·∫≠p listener cho token refresh
 */
function setupTokenRefreshListener() {
  messaging().onTokenRefresh(async (token) => {
    console.log("FCM Token ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi:", token);
    try {
      await AsyncStorage.setItem("fcmToken", token);
      console.log("Token m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u");
    } catch (error) {
      console.error("L·ªói khi l∆∞u token m·ªõi:", error);
    }
  });
}

/**
 * Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o t·ª´ ng∆∞·ªùi d√πng
 * @returns {Promise<boolean>} Tr·∫£ v·ªÅ true n·∫øu ƒë∆∞·ª£c c·∫•p quy·ªÅn, false n·∫øu kh√¥ng
 */
export async function requestUserPermission() {
  // Ki·ªÉm tra n·∫øu ƒëang ch·∫°y tr√™n thi·∫øt b·ªã di ƒë·ªông
  if (Platform.OS === "web") {
    console.log("Th√¥ng b√°o FCM kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ tr√™n web");
    return false;
  }

  try {
    // Y√™u c·∫ßu quy·ªÅn g·ª≠i th√¥ng b√°o
    const authStatus = await messaging().requestPermission();

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c·∫•p quy·ªÅn ch∆∞a
    const enabled =
      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
      authStatus === messaging.AuthorizationStatus.PROVISIONAL;

    if (enabled) {
      console.log("Tr·∫°ng th√°i quy·ªÅn th√¥ng b√°o:", authStatus);
      return true;
    }

    console.log("Quy·ªÅn th√¥ng b√°o b·ªã t·ª´ ch·ªëi");
    return false;
  } catch (error) {
    console.error("L·ªói khi y√™u c·∫ßu quy·ªÅn th√¥ng b√°o:", error);
    return false;
  }
}

/**
 * L·∫•y FCM token c·ªßa thi·∫øt b·ªã ƒë·ªÉ ƒëƒÉng k√Ω v·ªõi server
 * @returns {Promise<string|null>} FCM token ho·∫∑c null n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c
 */
export async function getFCMToken() {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ quy·ªÅn th√¥ng b√°o ch∆∞a
    const hasPermission = await requestUserPermission();
    if (!hasPermission) {
      console.log("Kh√¥ng c√≥ quy·ªÅn th√¥ng b√°o, kh√¥ng th·ªÉ l·∫•y token");
      return null;
    }

    // L·∫•y token t·ª´ b·ªô nh·ªõ n·∫øu c√≥
    const storedToken = await AsyncStorage.getItem("fcmToken");
    if (storedToken) {
      console.log("S·ª≠ d·ª•ng token ƒë√£ l∆∞u:", storedToken);
      return storedToken;
    }

    // L·∫•y token m·ªõi t·ª´ Firebase
    const fcmToken = await messaging().getToken();
    if (fcmToken) {
      console.log("FCM Token m·ªõi:", fcmToken);

      // L∆∞u token v√†o b·ªô nh·ªõ ƒë·ªÉ s·ª≠ d·ª•ng sau
      await AsyncStorage.setItem("fcmToken", fcmToken);
      return fcmToken;
    }

    console.log("Kh√¥ng l·∫•y ƒë∆∞·ª£c FCM Token");
    return null;
  } catch (error) {
    console.error("L·ªói khi l·∫•y FCM token:", error);
    return null;
  }
}

// Export c√°c d·ªãch v·ª• v√† h√†m ti·ªán √≠ch
export { firebase, auth };
