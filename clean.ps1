# #!/bin/bash

# echo "üßπ ƒêang d·ªçn d·∫πp d·ª± √°n React Native Android..."

# # X√≥a th∆∞ m·ª•c build
# Remove-Item -Recurse -Force android/app/build
# Remove-Item -Recurse -Force android/.gradle
# Remove-Item -Recurse -Force .gradle
# Remove-Item -Recurse -Force node_modules
# Remove-Item -Recurse -Force .expo
# Remove-Item -Recurse -Force .expo-shared

# # X√≥a cache h·ªá th·ªëng Gradle (ch·ªâ khi mu·ªën th·∫≠t s·∫°ch)
# echo "üì¶ X√≥a cache h·ªá th·ªëng Gradle (~/.gradle/caches)..."
# Remove-Item -Recurse -Force "$env:USERPROFILE\.gradle\caches" -ErrorAction SilentlyContinue

# # X√≥a lock file n·∫øu c·∫ßn
# Remove-Item -Force yarn.lock package-lock.json

# # C√†i l·∫°i package
# echo "üì¶ C√†i l·∫°i dependencies..."
# npm install

# # Clean gradle
# cd android
# ./gradlew clean --no-daemon
# cd ..

# # Build l·∫°i app
# echo "üöÄ Build l·∫°i app Android..."
# npx react-native run-android

# echo "‚úÖ Ho√†n t·∫•t!"
# reset-react-native.ps1

Write-Host "üöÄ B·∫Øt ƒë·∫ßu reset m√¥i tr∆∞·ªùng React Native & Gradle..." -ForegroundColor Cyan

# 1. Kill t·∫•t c·∫£ ti·∫øn tr√¨nh Gradle v√† Node
Write-Host "üß® Kill node.exe & java.exe n·∫øu c√≤n s·ªëng..."
Get-Process node -ErrorAction SilentlyContinue | Stop-Process -Force
Get-Process java -ErrorAction SilentlyContinue | Stop-Process -Force

# 2. Xo√° to√†n b·ªô cache Gradle v√† th∆∞ m·ª•c build Android
$gradleUserCache = "$env:USERPROFILE\.gradle"
$androidGradle = "android\.gradle"
$androidAppBuild = "android\app\build"

Write-Host "üßπ Xo√° cache Gradle v√† th∆∞ m·ª•c build..."
Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$gradleUserCache"
Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$androidGradle"
Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "$androidAppBuild"

# 3. Xo√° node_modules, lock files v√† th∆∞ m·ª•c .expo n·∫øu c√≥
Write-Host "üßº D·ªçn node_modules, .expo, lock files..."
Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "node_modules"
Remove-Item -Recurse -Force -ErrorAction SilentlyContinue ".expo"
Remove-Item -Recurse -Force -ErrorAction SilentlyContinue ".expo-shared"
Remove-Item -Force -ErrorAction SilentlyContinue "package-lock.json"
Remove-Item -Force -ErrorAction SilentlyContinue "yarn.lock"

# 4. C√†i l·∫°i npm packages
Write-Host "üì¶ C√†i l·∫°i npm packages..."
npm install

# 5. T√πy ch·ªçn: d√πng Expo prebuild n·∫øu c√≥ app.json
if (Test-Path "./app.json") {
    Write-Host "üîß Ph√°t hi·ªán app.json ‚Üí ch·∫°y expo prebuild --clean"
    npx expo prebuild --clean --no-install
} else {
    Write-Host "‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán app.json ‚Üí b·ªè qua b∆∞·ªõc prebuild"
}

# 6. D·ªçn cache Metro bundler
Write-Host "üß† Reset cache Metro bundler..."
Start-Process -NoNewWindow -FilePath "npx" -ArgumentList "react-native", "start", "--reset-cache" -PassThru | ForEach-Object {
    Start-Sleep -Seconds 5
    $_.Kill()
}


# 7. Build l·∫°i Android
Write-Host "üì≤ Build l·∫°i app Android..."
npx react-native run-android

Write-Host "‚úÖ Reset & Build ho√†n t·∫•t!" -ForegroundColor Green
